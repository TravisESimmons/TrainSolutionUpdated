#nullable disable
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.CodeAnalysis;
using Microsoft.EntityFrameworkCore.Infrastructure;
using System.Drawing.Printing;
using TrainWatchSystem.BLL;
using TrainWatchSystem.Entities;

namespace TrainWebApp.Pages
{
    public class CRUDModel : PageModel
    {
        #region Private service fields & class constructor
            private readonly ILogger<IndexModel> _logger;
            private readonly RollingStockServices _rollingStockServices;
            private readonly TrainWatchServices _trainWatchServices;

            public CRUDModel(ILogger<IndexModel> logger, RollingStockServices rollingStockServices, TrainWatchServices trainWatchServices)
            {
                _logger = logger;
                _rollingStockServices = rollingStockServices;
                _trainWatchServices = trainWatchServices;
            }
            #endregion

            [TempData]
            public string Feedback { get; set; }

            public bool HasFeedback => !string.IsNullOrWhiteSpace(Feedback);

            public string ErrorMessage { get; set; }

            public bool HasError => !string.IsNullOrWhiteSpace(ErrorMessage);

            [BindProperty(SupportsGet = true)]

            public string ReportingMark { get; set; }

            [BindProperty(SupportsGet = true)]

            public string SearchArg { get; set; }

            [BindProperty(SupportsGet = true)]
            public int? searcharg{ get; set; }

            [BindProperty]

            public RollingStock RollingStockInfo { get; set; }

            [BindProperty]
            public List<RailCarType> RailCarTypes { get; set; }

            [BindProperty(SupportsGet = true)]
            public int RailCarTypeID { get; set; }

        private void PopulateLists()
        {
            RailCarTypes = _rollingStockServices.RailCarTypeList();
        }

        public void OnGet()
        {
            //  The OnGet executes the first time the page is generated
            //      then on each Get request issued  by the page (such as on RedirectToPage())
            PopulateLists();

            if (!string.IsNullOrWhiteSpace(ReportingMark))
            {
                RollingStockInfo = _rollingStockServices.GetByID(ReportingMark);
            }

        }

        public IActionResult OnPostClear()
        {
            Feedback = "";
            //searcharg = null;
            ModelState.Clear();
            return RedirectToPage(new { ReportingMark = ReportingMark });
        }

        public IActionResult OnPostNew()
        {
            //  Forces client side validation to re-execute
            if (ModelState.IsValid)
            {
                //  The try/catch error handling is used to catch errors
                //      generated by the execution of the BLL service
                try
                {
                    //  Any BindProperty will have the current control contents in the property
                    //  If you expect to receive a value from the BLL service
                    //      you can caught the value in a local variable
                    //  In our example, I am expecting the new product id to be return from
                    //      the BLL service
                    string ReportingMark = _rollingStockServices.RollingStock_DeleteStock(RollingStockInfo);
                    //  Always give feedback to the client user
                    Feedback = $"Product id ";
                    return RedirectToPage(new { ReportingMark = ReportingMark });

                }
                catch (ArgumentNullException ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    //  Reload ANY list that are being used on your form
                    //  Example:  a list (collection) for a drop down list control
                    PopulateLists();
                    //  Stay on the "same" page
                    //  The idea is not to "LEAVE" the current request
                    //  This is required because you are using IActionReult as a
                    //      return datatype for this method
                    return Page();
                }
                catch (Exception ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    PopulateLists();
                    return Page();
                }
            }

            return Page();
        }


        public IActionResult OnPostDelete()
        {
            if (ModelState.IsValid)
            {
                try
                {
                    string ReportingMark = _rollingStockServices.RollingStock_DeleteStock(RollingStockInfo);
                    if (ReportingMark != null)
                    {
                        Feedback = $"Reporting Mark ({ReportingMark}) is no longer in use.";
                    }
                    else
                    {
                        Feedback = "No Rolling Stock was affected.  Refresh search and try again.";
                    }
                    return RedirectToPage(new { ReportingMark = ReportingMark });
                }
                catch (ArgumentNullException ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    PopulateLists();
                    return Page();
                }
                catch (Exception ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    PopulateLists();
                    return Page();
                }
            }

            return Page();
        }

        public IActionResult OnPostUpdate()
        {
            if (ModelState.IsValid)
            {
                try
                {
                    string ReportingMark = _rollingStockServices.RollingStock_DeleteStock(RollingStockInfo);
                    if (ReportingMark != null)
                    {
                        Feedback = $"Product id () has been updated on the system";
                    }
                    else
                    {
                        Feedback = "No product was affected.  Refresh search and try again.";
                    }
                    return RedirectToPage(new { ReportingMark = ReportingMark });
                }
                catch (ArgumentNullException ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    PopulateLists();
                    return Page();
                }
                catch (Exception ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    PopulateLists();
                    return Page();
                }
            }

            return Page();
        }

        private Exception GetInnerException(Exception ex)
        {
            while (ex.InnerException != null)
            {
                ex = ex.InnerException;

            }
            return ex;
        }



    }
    
}
